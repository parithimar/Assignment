1)reusability is increased.easy to develop and maintain.modularity is increased.

2)code in a function runs when it is called.

3)def statement creates a  function.

4)function is a passive entity that is definition only where as a function call is after which actually a funcion gets executed.

5)Local (or function) scope is the code block or body of any Python function or lambda expression. This Python scope contains the names that you define inside the function. These names will only be visible from the code of the function. It’s created at function call, not at function definition, so you’ll have as many different local scopes as function calls. This is true even if you call the same function multiple times, or recursively. Each call will result in a new local scope being created.

Enclosing (or nonlocal) scope is a special scope that only exists for nested functions. If the local scope is an inner or nested function, then the enclosing scope is the scope of the outer or enclosing function. This scope contains the names that you define in the enclosing function. The names in the enclosing scope are visible from the code of the inner and enclosing functions.

Global (or module) scope is the top-most scope in a Python program, script, or module. This Python scope contains all of the names that you define at the top level of a program or a module. Names in this Python scope are visible from everywhere in your code.

Built-in scope is a special Python scope that’s created or loaded whenever you run a script or open an interactive session. This scope contains names such as keywords, functions, exceptions, and other attributes that are built into Python. Names in this Python scope are also available from everywhere in your code. It’s automatically loaded by Python when you run a program or script.
   
   
6)the local variables are destroyed after a function call returns

7)A return is a value that a function returns to the calling script or function when it completes its task. A return value can be any one of the four variable types: handle, integer, object, or string. The type of value your function returns depends largely on the task it performs.

8)None will be the return value

9)If you want to refer to a global variable in a function, you can use the global keyword to declare which variables are global.

10) None is a data type of its own (NoneType) and only None can be None.

11)ModuleNotFoundError: No module named 'areallyourpetsnamederic' will be thrown

12)it becomes part of the code and we use spam.bacon() to call that function.

13)exception handling can be used to safe it from crash.

14)try clause is used to enclose the code block which is expected to throw exception. except is used to catch the exception thrown by the 
suspicious code which were encloded by try block






