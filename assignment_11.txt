1. Create an assert statement that throws an AssertionError if the variable spam is a negative integer.

def CreateAssertionError(spam):
  assert spam >= 0,"Number is negative"


2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are considered the same, and 'goodbye' and 'GOODbye' are also considered the same).

def CreateAssertionError(egg, bacon):
  assert egg.lower() != bacon.lower(), "Strings are same"


3. Create an assert statement that throws an AssertionError every time.

def CreateAssertionError():
  assert False


4. What are the two lines that must be present in your software in order to call logging.debug()?

import logging
logging.basicConfig(level=logging.DEBUG, format =  '%(levelname)s - %(message)s')

5. What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?

import logging
logging.basicConfig(filaname = 'programLog.txt',level = logging.DEBUG, format =  '%(levelname)s - %(message)s')

6. What are the five levels of logging?

DEBUG, INFO, WARNING, ERROR, and CRITICAL

7. What line of code would you add to your software to disable all logging messages?

logging.disable(logging.DEBUG)

8.Why is using logging messages better than using print() to display the same message?

 we can disable logging messages without removing the logging function calls.
 we can selectively disable lower-level logging messages. 
 Logging messages can be saved in a seperate file for future reference.


9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?
Step In: Gets inside a function
Step Over: Executes the function without stepping into it
Step Out: Executes the rest of the code until it steps out of it

10.After you click Continue, when will the debugger stop ?
The debugger will after the code gets completely executed or if encounters another breakpoint

11. What is the concept of a breakpoint?
breakpoint is a feature in a line of code that makes the debugger stop when it reaches the breakpoint line
