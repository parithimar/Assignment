1)[] is a notation used to create list in python

2)spam.insert(2,'hello') is used to insert the hello word in the third position in the given list

3)d

4)d

5)['a', 'b']

6)1

7)[3.14, 'cat', 11, 'cat', True, 99]

8)[3.14, 11, 'cat', True]

9)as with strings, the + operator concatenates lists. Similarly, the * operator repeats the items in a list a given number of times.

10)append method adds the item at the end of the list where as the insert method inserts at the specified index.

11)pop() and remove()

12)Lists are similar to strings, which are ordered collections of characters, except that the elements of a list can have any type and for any one list, the items can be of different types.

13) 1.Lists are mutable---Tuples are immutable
    2.Implication of iterations is Time-consuming---The implication of iterations is comparatively Faster
    3.The list is better for performing operations, such as insertion and deletion.---Tuple data type is appropriate for accessing the 
    4.Lists consume more memory---Tuple consume less memory as compared to the list
    5.Lists have several built-in methods---Tuple does not have many built-in methods.
    6.The unexpected changes and errors are more likely to occur---In tuple, it is hard to take place.
    
14)t=(42,)

15)list value's tuple form is get for example as follows l=[('a','e'),('c','d')] here ('a','e') and ('c','d') are tuples and l is a list
   tuple value's list form is get for example as follows t=(['a','e'],['c','d']) here ['a','e'] and ['c','d'] are lists and t is a tuple
   
16)Variables will contain references to list values rather than list values themselves. But for strings and integer values, variables simply contain the string or integer value. Python uses references whenever variables must store values of mutable data types, such as lists or dictionaries.

17)A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.

A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.
    





